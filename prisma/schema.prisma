generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // hoáº·c "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique @db.VarChar(255)
  password    String
  name        String
  role        Role       @default(CUSTOMER)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  orders      Order[]
  feedbacks   Feedback[]
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String?
  price       Float
  images      Json
  categoryId  String
  brandId     String

  category    Category      @relation(fields: [categoryId], references: [id])
  brand       Brand         @relation(fields: [brandId], references: [id])
  orderItems  OrderItem[]
  inventory   Inventory?
  feedback    Feedback[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  products  Product[]
}

model Brand {
  id        String     @id @default(uuid())
  name      String     @unique
  images    Json
  products  Product[]
}

model Order {
  id           String       @id @default(uuid())
  userId       String
  promotionId  String?

  user         User         @relation(fields: [userId], references: [id])
  promotion    Promotion?   @relation(fields: [promotionId], references: [id])
  status       OrderStatus  @default(PENDING)
  total        Float

  items        OrderItem[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

model Promotion {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  discount    Float
  startDate   DateTime
  endDate     DateTime

  orders      Order[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  image     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BannerPosition {
  HOMEPAGE
  SIDEBAR
  FOOTER
}

model Banner {
  id        String         @id @default(uuid())
  title     String
  image     String
  link      String?
  position  BannerPosition?

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Inventory {
  id        String   @id @default(uuid())
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(0)
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  productId String
  content   String
  rating    Int      @db.SmallInt

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
}
